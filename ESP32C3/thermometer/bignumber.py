######################################################################
# Displays a big number on the OLED display.
# 4 digits across and all of "blue" area
######################################################################

import math
bm0 = [0, 255, 0, 3, 255, 192, 7, 255, 224, 15, 255, 240, 31, 255, 248, 31, 255, 248, 63, 195, 252, 63, 129, 252, 127, 0, 254, 127, 0, 254, 127, 0, 254, 126, 0, 126, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 126, 0, 126, 127, 0, 254, 127, 0, 254, 127, 0, 254, 63, 129, 252, 63, 195, 252, 63, 255, 248, 31, 255, 248, 15, 255, 240, 7, 255, 224, 3, 255, 192, 0, 127, 0]
bm1 = [0, 7, 224, 0, 7, 224, 0, 15, 224, 0, 15, 224, 0, 31, 224, 0, 63, 224, 0, 127, 224, 1, 255, 224, 3, 255, 224, 15, 255, 224, 31, 255, 224, 31, 239, 224, 31, 207, 224, 31, 143, 224, 30, 15, 224, 16, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224]
bm2 = [0, 127, 128, 3, 255, 224, 7, 255, 240, 15, 255, 248, 31, 255, 252, 31, 255, 254, 63, 193, 254, 63, 128, 255, 127, 128, 127, 127, 0, 127, 127, 0, 127, 31, 0, 127, 0, 0, 127, 0, 0, 127, 0, 0, 254, 0, 0, 254, 0, 1, 254, 0, 3, 252, 0, 7, 252, 0, 15, 248, 0, 31, 240, 0, 63, 224, 0, 127, 192, 0, 255, 128, 1, 255, 0, 3, 254, 0, 7, 252, 0, 7, 248, 0, 15, 240, 0, 31, 240, 0, 63, 224, 0, 63, 255, 255, 127, 255, 255, 127, 255, 255, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]
bm3 = [0, 254, 0, 3, 255, 128, 7, 255, 224, 15, 255, 240, 31, 255, 240, 63, 255, 248, 63, 199, 248, 63, 131, 252, 127, 129, 252, 127, 1, 252, 7, 1, 252, 0, 1, 252, 0, 1, 252, 0, 3, 248, 0, 7, 248, 0, 31, 240, 0, 63, 224, 0, 63, 128, 0, 63, 224, 0, 63, 240, 0, 63, 252, 0, 1, 252, 0, 0, 254, 0, 0, 255, 0, 0, 127, 0, 0, 127, 30, 0, 127, 254, 0, 127, 255, 0, 127, 255, 0, 255, 127, 128, 254, 127, 195, 254, 63, 255, 252, 63, 255, 252, 31, 255, 248, 15, 255, 240, 3, 255, 192, 0, 255, 0]
bm4 = [0, 0, 252, 0, 0, 1, 252, 0, 0, 3, 252, 0, 0, 3, 252, 0, 0, 7, 252, 0, 0, 15, 252, 0, 0, 15, 252, 0, 0, 31, 252, 0, 0, 63, 252, 0, 0, 63, 252, 0, 0, 127, 252, 0, 0, 255, 252, 0, 0, 255, 252, 0, 1, 253, 252, 0, 3, 249, 252, 0, 3, 249, 252, 0, 7, 241, 252, 0, 15, 225, 252, 0, 15, 225, 252, 0, 31, 193, 252, 0, 63, 129, 252, 0, 63, 129, 252, 0, 127, 1, 252, 0, 254, 1, 252, 0, 255, 255, 255, 224, 255, 255, 255, 224, 255, 255, 255, 224, 255, 255, 255, 224, 255, 255, 255, 224, 255, 255, 255, 224, 0, 1, 252, 0, 0, 1, 252, 0, 0, 1, 252, 0, 0, 1, 252, 0, 0, 1, 252, 0, 0, 1, 252, 0, 0, 1, 252, 0, 0, 1, 252, 0]
bm5 = [7, 255, 254, 0, 7, 255, 254, 0, 7, 255, 254, 0, 15, 255, 254, 0, 15, 255, 254, 0, 15, 255, 254, 0, 15, 255, 254, 0, 15, 224, 0, 0, 31, 192, 0, 0, 31, 192, 0, 0, 31, 192, 0, 0, 31, 192, 0, 0, 31, 223, 128, 0, 63, 255, 224, 0, 63, 255, 248, 0, 63, 255, 252, 0, 63, 255, 254, 0, 63, 255, 254, 0, 127, 193, 255, 0, 127, 128, 255, 0, 15, 0, 127, 0, 0, 0, 63, 128, 0, 0, 63, 128, 0, 0, 63, 128, 0, 0, 63, 128, 0, 0, 63, 128, 30, 0, 63, 128, 254, 0, 63, 128, 255, 0, 127, 128, 127, 0, 127, 0, 127, 128, 255, 0, 127, 193, 254, 0, 63, 255, 254, 0, 31, 255, 252, 0, 31, 255, 248, 0, 7, 255, 240, 0, 3, 255, 192, 0, 0, 255, 0, 0]
bm6 = [0, 127, 0, 1, 255, 192, 3, 255, 240, 15, 255, 248, 15, 255, 248, 31, 255, 252, 63, 195, 252, 63, 129, 254, 127, 0, 254, 127, 0, 248, 126, 0, 0, 126, 0, 0, 254, 0, 0, 254, 63, 0, 254, 255, 224, 255, 255, 240, 255, 255, 248, 255, 255, 252, 255, 255, 252, 255, 195, 254, 255, 1, 254, 255, 0, 255, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 126, 0, 127, 126, 0, 127, 127, 0, 127, 127, 0, 254, 63, 128, 254, 63, 195, 254, 31, 255, 252, 31, 255, 252, 15, 255, 248, 7, 255, 240, 1, 255, 192, 0, 127, 0]
bm7 = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 0, 1, 254, 0, 3, 252, 0, 3, 248, 0, 7, 240, 0, 15, 240, 0, 15, 224, 0, 31, 192, 0, 31, 192, 0, 63, 128, 0, 63, 128, 0, 127, 0, 0, 127, 0, 0, 254, 0, 0, 254, 0, 1, 252, 0, 1, 252, 0, 1, 252, 0, 3, 248, 0, 3, 248, 0, 3, 248, 0, 7, 240, 0, 7, 240, 0, 7, 240, 0, 7, 240, 0, 7, 240, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0, 15, 224, 0]
bm8 = [0, 255, 0, 7, 255, 224, 15, 255, 240, 31, 255, 248, 63, 255, 252, 63, 255, 252, 127, 195, 254, 127, 129, 254, 127, 0, 254, 127, 0, 254, 127, 0, 254, 127, 0, 254, 63, 129, 252, 63, 195, 252, 31, 255, 248, 15, 255, 240, 3, 255, 192, 7, 255, 224, 31, 255, 248, 63, 255, 252, 63, 195, 252, 127, 1, 254, 127, 0, 254, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 255, 0, 255, 127, 128, 254, 127, 195, 254, 63, 255, 252, 63, 255, 252, 31, 255, 248, 15, 255, 240, 3, 255, 192, 0, 255, 0]
bm9 = [0, 254, 0, 3, 255, 128, 15, 255, 224, 31, 255, 240, 63, 255, 248, 63, 255, 248, 127, 195, 252, 127, 1, 252, 127, 0, 254, 254, 0, 254, 254, 0, 126, 254, 0, 126, 254, 0, 127, 254, 0, 127, 254, 0, 127, 254, 0, 127, 255, 0, 255, 127, 128, 255, 127, 195, 255, 63, 255, 255, 63, 255, 255, 31, 255, 255, 15, 255, 191, 7, 255, 127, 0, 252, 127, 0, 0, 127, 0, 0, 126, 0, 0, 126, 31, 0, 254, 127, 0, 254, 127, 129, 252, 63, 195, 252, 63, 255, 248, 31, 255, 240, 31, 255, 240, 15, 255, 192, 7, 255, 128, 0, 254, 0
]
bmF = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0]
bmC = [0, 255, 0, 3, 255, 192, 7, 255, 224, 15, 255, 240, 31, 255, 248, 31, 255, 248, 63, 195, 252, 63, 129, 252, 127, 0, 254, 127, 0, 254, 127, 0, 254, 126, 0, 126, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 254, 0, 0, 126, 0, 126, 127, 0, 254, 127, 0, 254, 127, 0, 254, 63, 129, 252, 63, 195, 252, 63, 255, 248, 31, 255, 248, 15, 255, 240, 7, 255, 224, 3, 255, 192, 0, 127, 0]

# width = 1
bm_dot = [254, 254, 254, 254, 254, 254, 254]
bm_colon = [254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 0, 0, 0, 254, 254, 254, 254, 254, 254, 254]

digitMap=[bm0,bm1,bm2,bm3,bm4,bm5,bm6,bm7,bm8,bm9]

def bigTemp(oled, temp, unit):

    org_y = 20
    width = 30

    if temp >= 100:
        noOfDigits = 3
        displayTemp = temp
        decimal = False
    elif temp >= 10:
        displayTemp = temp*10
        noOfDigits = 3
        decimal = True
    else:
        displayTemp = temp*10
        noOfDigits = 2
        decimal = True

    org_x = (3 - noOfDigits ) * width

    for digitNo in range(noOfDigits):
        digit = int( (displayTemp / (10 ** (noOfDigits - digitNo - 1)) ) % 10 )
        bigDigit(oled, org_x, org_y, digit)
        org_x = org_x + width
        if decimal and (noOfDigits-digitNo == 2):
            bigDot(oled,org_x-3,org_y)
            org_x = org_x + 6

    bigLetter(oled,100,20,unit)
    if oled:
        oled.show()
    else:
        print("{}{}".format(temp,unit))



def bigNumber(oled, number):
    org_y = 20
    width = 30
    if number:
        noOfDigits = min(int(math.log(number,10) + 1),4)
    else:
        noOfDigits = 1
    org_x = (4 - noOfDigits ) * width + 4
    for digitNo in range(noOfDigits):
        digit = int( (number / (10 ** (noOfDigits - digitNo - 1)) ) % 10 )
        x = org_x + digitNo * width
        bigDigit(oled, x, org_y, digit)

def bigDigit(oled, org_x, org_y, digit):
    if digit in [4,5]:
        width = 4
    else:
        width = 3
    height = 38
    #Make sure it is a digit
    digit = digit % 10
    bitmap = digitMap[digit]
    displayBitmap(oled, org_x, org_y, width, height, bitmap)

def bigDot(oled, org_x, org_y):
    displayBitmap(oled, org_x, org_y+31, 1, 7, bm_dot)

def bigColon(oled, org_x, org_y):
    displayBitmap(oled, org_x, org_y+10, 1, 20, bm_colon)

def bigLetter(oled, org_x, org_y, letter):
    if letter in ['f','F']:
        bitmap = bmF
    else:
        bitmap = bmC

    displayBitmap(oled, org_x, org_y, 3, 38, bitmap)


def displayBitmap(oled, org_x, org_y, width, height, bitmap):
    if oled:
        for row in range (height):
            for bytecol in range (width):
                byte = bitmap[row*width + bytecol]
                for  i in range (8):
                    col = bytecol * 8 + i
                    x = org_x + col
                    y = org_y + row
                    map = 2**(7-i)
                    if map & byte:
                        oled.pixel(x, y, 1)
                    else:
                        oled.pixel(x, y, 0)
